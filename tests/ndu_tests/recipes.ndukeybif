### === KEYBIF EXTRACTOR CONFIGURATION ===
    This file defines which files should be included or excluded
    when extracting game resources.

    You can define sources (game installs) and recipes (filters),
    and store them for easy reuse. Once defined, simply select one
    source and one recipe to apply at a time.
###

### === ACTIVE SELECTION ===
    Only one source and one recipe are used at a time.
###
selected.source_id(0).recipe_id(0)

### === SOURCES ===
    Define one or more game installs here. Useful for switching
    between stable, beta, or preview versions.

    To create a new source:
        1. Copy an existing source block.
        2. Assign it a new unique ID.
        3. Set the path to your game installation.
        4. Optionally specify a list of key files, or leave it empty to use the default.
           By default, it will load:
             - nwn_retail.key (latest overrides)
             - nwn_base.key   (base game)
           This covers most needs — you usually don’t need to change it.
###
source.id(0).description("Stable")
    game.path("/my/games/steam/steamapps/common/Neverwinter Nights")
    game.keylist("nwn_retail, nwn_base")

### === RECIPES ===
    Define filters that select which files to extract.

    To create a new recipe:
        1. Copy an existing recipe block.
        2. Assign it a new unique ID.
        3. Add match and exclude lines as needed.

    Filter fields:
        name_start("text")   → matches if filename starts with "text"
        name_part("text")    → matches if filename contains "text"
        name_end("text")     → matches if filename ends with "text"
        extension("ext")     → matches the file extension (e.g. "mdl")

    Wildcards allowed inside quotes:
        @ → any letter         (e.g. "pm@" matches "pma", "pmb")
        # → any digit          (e.g. "file#" matches "file1", "file9")
        ? → letter/digit/_     (like \w in regex; matches "a", "3", "_", etc.)

    Rule priority (in order):
        1. exclude.fullname() → Blacklist: always excluded
        2. match.fullname()   → Whitelist: always included (unless blacklisted above)
        3. exclude[...]       → Pattern-based exclusion (e.g. by name or extension)
        4. match[...]         → Pattern-based inclusion (OR logic)

        If a file matches multiple filters, this order decides which one "wins".
        A file blacklisted by `exclude.fullname()` is never included, even if other rules match.
        A file whitelisted by `match.fullname()` is always included, unless blacklisted first.
###
recipe.id(0).description("Template")
    ### Copy this block to define a new recipe.
        Fill in one or more values per line.
        Empty lines can be deleted if unused.
    ###
    exclude.fullname()
    match.fullname()
    exclude.name_start().name_part().name_end().extension()
    match.name_start().name_part().name_end().extension()

### === EXAMPLE RECIPES === ###

recipe.id(1000).description("All GFF files")
    # A list of extensions
    match.extension("are, git, gic, bic, dlg, fac, gff, gui, ifo, itp, jrl")
    match.extension("ut@")

recipe.id(1001).description("All 2DA files except tileset-related")
    exclude.name_end("_edge").extension("2da")
    exclude.name_part("door").extension("2da")
    match.extension("2da")

recipe.id(1002).description("Tileset control files")
    match.name_end("_edge").extension("2da")
    match.extension("set")

recipe.id(1003).description("GUI-related files")
    match.fullname("dth_deathopts.mdl, editsvrstat.mdl, empty.mdl, gui_empty.mdl")
    match.extension("gui")
    match.name_start("gui").extension("mdl, tga, dds, plt")
    match.name_start("ctl_, edit_, inv_, pnl_").extension("mdl")

recipe.id(1004).description("Part-based models")
    match.name_start("pm@#_@, pf@###_@").name_part().extension("mdl, plt")
    match.name_start("ipm_, ipf_").name_part().extension("plt")
